import os
import sys
import argparse
import argparse  
from termcolor import colored
from pydantic import BaseModel, ValidationError, Field
from openai import OpenAI, APIConnectionError, APIError, AuthenticationError, RateLimitError, OpenAIError
from typing import List, Dict, Optional
import json
from dotenv import load_dotenv

MSG_COLOR = {
    "success": {"color": "green", "attrs": ["bold"]},
    "warning": {"color": "yellow", "attrs": ["bold"]},
    "error": {"color": "red", "attrs": ["bold"]},
    "info": {"color": "blue", "attrs": ["bold"]},
}

def print_colored(text, **kwargs):
    color = kwargs.get("color", "white")
    attrs = kwargs.get("attrs", None)
    print(colored(text, color, attrs=attrs))

# Mod√®les Pydantic
#
class EarnRate(BaseModel):
    regular_spending: Optional[str] = Field(alias="regularSpending")

class WelcomeOffer(BaseModel):
    bonus_points: Optional[int] = Field(alias="bonusPoints")
    description: Optional[str] = Field(alias="description")

class InterestRate(BaseModel):
    purchase_rate: Optional[str] = Field(alias="purchaseRate")

class Rewards(BaseModel):
    program: Optional[str] = Field(alias="program")  # Fixed alias
    earn_rates: Optional[EarnRate] = Field(alias="earnRates")
    redemption_options: Optional[List[str]] = Field(alias="redemptionOptions")

class CreditCard(BaseModel):
    card_name: Optional[str] = Field(alias="cardName")
    issuer: Optional[str] = Field(alias="issuer")
    annual_fee: Optional[str] = Field(alias="annualFee")
    interest_rate: Optional[InterestRate] = Field(alias="interestRate")
    rewards: Optional[Rewards] = Field(alias="rewardsProgram")  # Top-level key is "rewardsProgram"
    perks: Optional[List[str]] = Field(alias="mainBenefits")
    credit_score: Optional[str] = Field(alias="creditScoreRecommendation")
    introductory_offer: Optional[WelcomeOffer] = Field(
        alias="welcomeOffer", default=None
    )  # Now optional with default
    foreign_fee: Optional[str] = Field(alias="foreignTransactionFee")
    source: Optional[str] = Field(alias="officialWebsite")

# Fonction
#
def get_api_client(api_type: str, openai_key: str, perplexity_key: str):
    """Initialise le client API appropri√© en fonction du type sp√©cifi√©
    
    Args:
        api_type (str): "openai" ou "perplexity"
        openai_key (str): Cl√© d'API OpenAI
        perplexity_key (str): Cl√© d'API Perplexity
        
    Returns:
        Client API configur√© avec les param√®tres appropri√©s
    
    Raises:
        ValueError: Si le type d'API n'est pas support√©
    """
    if api_type == "openai":
        return OpenAI(api_key=openai_key)
    elif api_type == "perplexity":
        # Configuration sp√©cifique pour Perplexity avec URL de base diff√©rente
        return OpenAI(
            api_key=perplexity_key,
            base_url="https://api.perplexity.ai"
        )
    else:
        raise ValueError("API non support√©e")
    
def handle_api_errors(e: Exception, api_type: str, response_text=""):
    """G√®re les erreurs d'API de mani√®re centralis√©e avec messages color√©s
    
    Args:
        e (Exception): Exception captur√©e
        api_type (str): Type d'API concern√© ("openai" ou "perplexity")
    """

    error_message = str(e)

    # Authentification invalide (cl√©s incorrectes ou expir√©es)
    if isinstance(e, AuthenticationError):
        print_colored(f"üîí {api_type.upper()}: Cl√© API invalide", **MSG_COLOR["error"])
    # Limite de requ√™tes atteinte (API satur√©e)
    elif isinstance(e, RateLimitError):
        print_colored(f"‚è≥ {api_type.upper()}: Limite de d√©bit atteinte", **MSG_COLOR["warning"])
    # Erreur de connexion r√©seau ou API hors ligne
    elif isinstance(e, APIConnectionError):
        print_colored(f"üî¥ {api_type.upper()}: Connexion impossible", **MSG_COLOR["error"])
    # R√©ponse non conforme au format JSON attendu
    elif isinstance(e,json.JSONDecodeError):
        print_colored("‚ùå ERREUR JSON : Format incorrect", **MSG_COLOR["error"])
        print_colored(f"D√©tails : {str(e)}", color="yellow")  # Use keyword argument
        print_colored(f"Contenu re√ßu : '{response_text[:50]}...'", color="magenta")
        print_colored("V√©rifiez la structure de la r√©ponse API", **MSG_COLOR["warning"])
    # Donn√©es non conformes au mod√®le Pydantic
    elif isinstance(e, ValidationError):
        print_colored("‚ö†Ô∏è ERREUR DE VALIDATION", **MSG_COLOR["warning"])
        for error in e.errors():
            loc = " ‚Üí ".join(map(str, error['loc']))
            print_colored(f"  ‚Ä¢ {loc} : {error['msg']}", **MSG_COLOR["error"])
    # Incoh√©rence de type (ex: str au lieu de int)
    elif isinstance(e, TypeError):
        print_colored("‚ùó ERREUR DE TYPE : Donn√©es non s√©rialisables", **MSG_COLOR["error"])
        print_colored(f"D√©tails : {str(e)}", color="yellow")
    # Valeur invalide (ex: champ requis manquant)
    elif isinstance(e, ValueError):
        print_colored(f"‚ùó ERREUR DE TYPE/VALEUR : {str(e)}", **MSG_COLOR["error"])
    # Structure des messages incorrecte pour l'API
    elif "Last message must have role `user`" in error_message:
        print_colored(f"‚ö†Ô∏è {api_type.upper()}: Dernier message doit √™tre un message utilisateur (role `user`)", **MSG_COLOR["warning"])
    # Erreur g√©n√©rique non cat√©goris√©e
    else:
        print_colored(f"‚ùó {api_type.upper()}: {error_message}", **MSG_COLOR["error"])

def build_messages(selected_api, card_choice):
    """Construit la structure de messages pour la requ√™te API
    
    Diff√©rencie la structure selon l'API utilis√©e (OpenAI vs Perplexity)
    
    Args:
        selected_api (str): "openai" ou "perplexity"
        card_choice (str): Nom de la carte bancaire choisie
        
    Returns:
        list: Structure de messages adapt√©e √† l'API
    """

    base_content =( 
                    f"Provide structured JSON data for the {card_choice} Canadian card with these keys and specifications. If any information is not found, return 'null' for the corresponding key.\n\n"  
                    "‚Ä¢ cardName (string): Exact name of the card (ex: 'Amex Green Card')\n"  
                    "‚Ä¢ issuer (string): 'American Express Canada' or 'null' if not found\n"  
                    "‚Ä¢ annualFee (string): 'Free' or amount in $CAD (ex: '129$') or 'null'\n"  
                    "‚Ä¢ interestRate (object):\n"  
                    "   - purchaseRate (string): Interest rate in % (ex: '19.99%') or 'null'\n"  
                    "‚Ä¢ welcomeOffer (object):\n"  
                    "‚Ä¢ rewardsProgram (object):\n"  
                    "   - bonusPoints (int): 30,000\n"  
                    "   - description (string): Get up to 30,000 points in the first year by earning 2,500 points\n"  
                    "   - program (string): Name of the program or 'null'\n"  
                    "   - earnRates (object):\n"  
                    "       - regularSpending (string): Points per $1 or 'null'\n"  
                    "   - redemptionOptions (array): 2-3 options or ['null']\n"  
                    "‚Ä¢ mainBenefits (array): 3-5 benefits or ['null']\n"  
                    "‚Ä¢ creditScoreRecommendation (string): Score range (ex: 'Good or Excellent') or 'null'\n"  
                    "‚Ä¢ foreignTransactionFee (string): 'None' or amount (ex: '0%') or 'null'\n"  
                    "‚Ä¢ officialWebsite (string): Official Canadian link or 'null'\n\n"  
                    "Formats:\n"  
                    "- Numeric values remain as strings (ex: '129$')\n"  
                    "- Empty objects must contain 'null' for sub-fields\n"  
                    "- Empty arrays must be ['null']\n"  
                    "Return only JSON, no explanatory text or presentation"      
                )
    if selected_api == "openai":
        messages=[
                {
                    "role": "system",
                    "content": base_content
                }
            ]
    else:  # Perplexity
        messages = [
        # Message syst√®me (configuration)
        {
            "role": "system",
            "content": "Provide structured JSON data with these keys and specifications. If any information is not found, return 'null' for the corresponding key"        },
        # Message utilisateur (requete finale)
        {
            "role": "user",
            "content": (base_content)
        }
    ]   
        
    return messages
    
def prompt_for_api_and_model_selection():
    """Affiche l'interface interactive de s√©lection des param√®tres
    
    Renvoie les choix de l'utilisateur apr√®s validation
    """
    # √âcran d'accueil interactif
    print_colored("Bienvenue dans l'assistant de carte de cr√©dit", **MSG_COLOR["info"])
    # S√©lection de l'API par menu
    api_options = ["OpenAI", "Perplexity"]
    while True:
        print("\nChoisissez l'API :")
        for idx, option in enumerate(api_options, 1):
            print(f"{idx}. {option}")
        try:
            api_choice = int(input("Entrez le num√©ro : "))
            selected_api = api_options[api_choice-1].lower()
            break
        except (ValueError, IndexError):
            print_colored("Num√©ro invalide", **MSG_COLOR["warning"])
 
    # S√©lection du mod√®le par menu
    models = {
        "openai": ["o1", "gpt-3.5-turbo"],
        "perplexity": ["sonar-pro", "sonar", "sonar-reasoning-pro"]
    }
    model_list = models[selected_api]
    while True:
        print("\nMod√®les disponibles :")
        for idx, model in enumerate(model_list, 1):
            print(f"{idx}. {model}")
        try:
            model_choice = int(input("Entrez le num√©ro du mod√®le : "))
            selected_model = model_list[model_choice-1]
            break
        except (ValueError, IndexError):
            print_colored("Num√©ro invalide", **MSG_COLOR["warning"])


    print("\nChoisissez la carte :")
    card_choice = str(input("Entrez le nom de la carte : "))

    return selected_api, selected_model, card_choice

def client_creation(selected_api,openai_key,perplexity_key):
    # Cr√©ation du client
    try:
        client = get_api_client(
            api_type=selected_api,
            openai_key=openai_key or os.getenv("OPENAI_API_KEY"),
            perplexity_key=perplexity_key or os.getenv("PERPLEXITY_API_KEY")
        )
        return client
    except Exception as e:
        print_colored(f"Impossible de cr√©er le client : {str(e)}", **MSG_COLOR["error"])
        raise  
    
def execute_chat_completion(client, selected_api: str, selected_model: str, messages: list) -> tuple[bool, Optional[object]]:
    """Ex√©cute une requ√™te de compl√©tion chat en fonction de l'API choisie et g√®re les erreurs
    
    Args:
        client: Client API configur√© (OpenAI ou Perplexity)
        selected_api (str): Type d'API ("openai" ou "perplexity")
        selected_model (str): Nom du mod√®le √† utiliser
        messages (list): Structure de messages pour la requ√™te
        
    Returns:
        tuple: 
            - bool: Succ√®s de la requ√™te API
            - object: R√©ponse de l'API ou None en cas d'√©chec
    """

    try:
            print(selected_api, selected_model)
            if selected_api == "openai":
                # OpenAI requires response_format
                completion = client.chat.completions.create(
                    model=selected_model,
                    messages=messages,
                    response_format={"type": "json_object"}
                )
            else:
                # Perplexity doesn't support response_format
                completion = client.chat.completions.create(
                    model=selected_model,
                    messages=messages
                )
            print_colored("‚úÖ Connexion r√©ussie", **MSG_COLOR["success"])
            return (completion,True)
    except OpenAIError as e:
        handle_api_errors(e, selected_api )
        return (False, None)
    except Exception as e:
        print_colored(f"‚ùó ERREUR INCONNUE : {str(e)}", **MSG_COLOR["error"])
        return (False, None)

def retrieve_api_keys_based_on_api_selection(selected_api: str) -> tuple[Optional[str], Optional[str]]:
    """R√©cup√®re les cl√©s d'API depuis les variables d'environnement ou saisie manuelle selon l'API choisie
    
    Args:
        selected_api (str): Type d'API ("openai" ou "perplexity")
        
    Returns:
        tuple:
            - str: Cl√© OpenAI ou None
            - str: Cl√© Perplexity ou None
            
    Raises:
        SystemExit: Si aucune cl√© valide n'est fournie
    """
    openai_key = os.getenv('OPENAI_KEY')
    perplexity_key = os.getenv('PERPLEXITY_KEY')

    # Demande manuelle de la cl√© si manquante, selon l'API choisie
    if selected_api == "openai":
        # V√©rification de la cl√© OpenAI
        if not openai_key:
            # Demande interactive si la cl√© n'est pas pr√©sente dans .env
            openai_key = input("Cl√© OpenAI (laisser vide pour utiliser .env) : ").strip()
    else:
        if not perplexity_key:
            perplexity_key = input("Cl√© Perplexity (laisser vide pour utiliser .env) : ").strip()

    if not (openai_key or perplexity_key):
        print_colored("‚ùå Cl√©s d'API manquantes", **MSG_COLOR["error"])
        sys.exit(1)

    return openai_key, perplexity_key 

def process_api_response_and_validate(
    completion: object, 
    selected_api: str, 
    response_text: str
)  -> bool:
    """Traite la r√©ponse API, valide les donn√©es et sauvegarde les r√©sultats
    
    Args:
        completion (object): Objet de r√©ponse de l'API
        selected_api (str): Type d'API utilis√© ("openai" ou "perplexity")
        response_text (str): Contenu brut de la r√©ponse API
        
    Returns:
        bool: Vrai si le traitement est r√©ussi, Faux sinon
    """
    try: 
        with open("previu.json", "w", encoding="utf-8") as f:
            f.write(response_text)
        print_colored("üíæ Donn√©es brutes sauvegard√©es", **MSG_COLOR["success"])
        # Add check for empty response
        if not response_text.strip():
            raise ValueError("R√©ponse API vide")
        card_data = json.loads(response_text)
        
        # Conversion manuelle si n√©cessaire
        if "annualFee" in card_data and isinstance(card_data["annualFee"], int):
            card_data["annualFee"] = str(card_data["annualFee"])
        # Validation
        credit_card = CreditCard(**card_data)
        
        print_colored("‚úÖ Donn√©es valid√©es", **MSG_COLOR["success"])
        # Sauvegarde finale
        with open("result.json", "w", encoding="utf-8") as f:
            json.dump([credit_card.model_dump(by_alias=True)], f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        handle_api_errors(e, selected_api, response_text)
        return False  # Return tuple


# Implemtation de la logic    
def main():
    load_dotenv(override=True)
    
    selected_api, selected_model, card_choice =  prompt_for_api_and_model_selection()

    OPENAI_KEY, PERPLEXITY_KEY = retrieve_api_keys_based_on_api_selection(selected_api)

    #Client creation
    client = client_creation(selected_api, OPENAI_KEY, PERPLEXITY_KEY)

    # Configuration de la requ√™te
    messages= build_messages(selected_api, card_choice)

    print_colored(f"\nConnexion √† {selected_api.upper()}", **MSG_COLOR["info"])

    api_success = False
    processing_success = False

    completion, api_success = execute_chat_completion(client, selected_api, selected_model, messages)
    
    response_text = completion.choices[0].message.content

    if api_success:
        processing_success = process_api_response_and_validate(completion,selected_api, response_text)
    if not api_success:
        print_colored("‚ùå √âCHEC DE LA CONNEXION", **MSG_COLOR["error"])
    elif processing_success:
        print_colored("‚úÖ OP√âRATION COMPL√âT√âE", **MSG_COLOR["success"])
    else:
        print_colored("‚ö†Ô∏è TRAITEMENT √âCHEC", **MSG_COLOR["warning"])

if __name__ == "__main__":
    main()