
import json
from flask import logging
from jsonschema import ValidationError
from openai import APIConnectionError, AuthenticationError, OpenAIError, RateLimitError
from core_functions import MSG_COLOR, print_colored


def handle_api_errors(e: Exception, api_type: str="", response_text=""):
    """G√®re les erreurs d'API de mani√®re centralis√©e avec messages color√©s
    
    Args:
        e (Exception): Exception captur√©e
        api_type (str): Type d'API concern√© ("openai" ou "perplexity")
    """

    error_message = str(e)

    # Authentification invalide (cl√©s incorrectes ou expir√©es)
    if isinstance(e, AuthenticationError):
        msg = f"üîí {api_type.upper()}: Cl√© API invalide"
        print_colored(msg, **MSG_COLOR["error"])
        logging.error(msg)    # Limite de requ√™tes atteinte (API satur√©e)
    elif isinstance(e, RateLimitError):
        msg = f"‚è≥ {api_type.upper()}: Limite de d√©bit atteinte"
        print_colored(msg, **MSG_COLOR["warning"])
        logging.warning(msg)    # Erreur de connexion r√©seau ou API hors ligne
    elif isinstance(e, APIConnectionError):
        msg = f"üî¥ {api_type.upper()}: Connexion impossible"
        print_colored(msg, **MSG_COLOR["error"])
        logging.error(msg)    # R√©ponse non conforme au format JSON attendu
    elif isinstance(e,json.JSONDecodeError):
        print_colored("‚ùå ERREUR JSON : Format incorrect", **MSG_COLOR["error"])
        print_colored(f"D√©tails : {str(e)}", color="yellow")  # Use keyword argument
        print_colored(f"Contenu re√ßu : '{response_text[:50]}...'", color="magenta")
        print_colored("V√©rifiez la structure de la r√©ponse API", **MSG_COLOR["warning"])
    # Donn√©es non conformes au mod√®le Pydantic
    elif isinstance(e, ValidationError):
        print_colored("‚ö†Ô∏è ERREUR DE VALIDATION", **MSG_COLOR["warning"])
        for error in e.errors():
            loc = " ‚Üí ".join(map(str, error['loc']))
            print_colored(f"  ‚Ä¢ {loc} : {error['msg']}", **MSG_COLOR["error"])
    # Incoh√©rence de type (ex: str au lieu de int)
    elif isinstance(e, TypeError):
        print_colored("‚ùó ERREUR DE TYPE : Donn√©es non s√©rialisables", **MSG_COLOR["error"])
        print_colored(f"D√©tails : {str(e)}", color="yellow")
    # Valeur invalide (ex: champ requis manquant)
    elif isinstance(e, ValueError):
        print_colored(f"‚ùó ERREUR DE TYPE/VALEUR : {str(e)}", **MSG_COLOR["error"])
    elif isinstance(e, OpenAIError):
        msg = f"‚ùó {api_type.upper()}: Erreur OpenAI - {error_message}"
        print_colored(msg, **MSG_COLOR["error"])
        logging.error(msg)
    # Structure des messages incorrecte pour l'API
    elif "Last message must have role `user`" in error_message:
        print_colored(f"‚ö†Ô∏è {api_type.upper()}: Dernier message doit √™tre un message utilisateur (role `user`)", **MSG_COLOR["warning"])
    # Erreur g√©n√©rique non cat√©goris√©e
    else:
        print_colored(f"‚ùó {api_type.upper()}: {error_message}", **MSG_COLOR["error"])
